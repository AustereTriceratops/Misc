'''
A program in Processing.py which generates a Poincare map for the duffing equation. 
The finished result looks like this: https://imgur.com/bbv3AMt.gif
'''

phasex = [0]*144       #phase space coordinates in time, velocity, and position
phasev = [0]*144
for i in range(0,144,1):
    phasex[i] = [0]
    phasev[i] = [0]

f = 0
s = 0
w = 0
a = 0

xscl = 300.0
yscl = 120.0

xc = 1.0
xc_v = -2.0   

while f<1000000:
    f+=1
    s = f/36.0
    t = s*PI
    fmod = f % 144
    
    xc_a = 8*cos(0.5*t) - 0.02*xc_v - xc -5*xc**3
    xc_v += (PI/36.0)*xc_a
    xc += (PI/36.0)*xc_v
    
    phasex[fmod][w] = xc
    phasev[fmod][w] = xc_v
    phasex[fmod].append(0)
    phasev[fmod].append(0)
    
    if fmod==0:
        w+=1
        redraw()
        
def keyPressed():
    if keyCode == UP:
        global a
        a +=1
        redraw()
    if keyCode == DOWN:
        global a
        a -=1
        redraw()
        
        
def graph(a): 
    domain = len(phasex[a])
    j=0
    fill(10,180)
    stroke(10,140)
    strokeWeight(0.6)
    while j<domain:
        ellipse(xscl*phasex[a][j],-yscl*phasev[a][j],0.9,0.9)
        j+=1


def setup():
    size(1300,800)
    noLoop()
    
    
def draw():
    translate(width/2, height/2)
    background(255)
    
    graph(a%144)
    
    saveFrame('graph-###.png')
